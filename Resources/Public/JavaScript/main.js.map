{"version":3,"sources":["filter.js","listing.js"],"names":["getKeyFromId","id","idSubstring","split","getListElementId","nodeId","getGridElementId","getSelectByKey","key","selectId","FILTERIDSUBSTRING","document","getElementById","getAllSelects","selects","filterKeys","forEach","push","addKeysToList","list","elements","regex","RegExp","i","length","test","initKeyLists","getElementsByTagName","divs","listPropertyKeys","LISTPROPERTYIDSUBSTRING","Array","from","Set","addNodeToGroupList","node","currentGroup","j","group","newGroup","getNodesByGroup","groups","projectsList","createListItemProperty","property","createElement","innerHTML","classList","createListItem","newListItem","appendChild","addGroupToHTML","headline","initList","initNodes","project","newNode","listElement","gridElement","name","nodes","addKeyToList","getSelectOptionsLists","nodeList","lists","setOption","option","value","contains","HIDDEN","remove","add","updateDropdowns","select","activeOptionsLists","getActiveNodes","index","filters","options","hideSelectOptions","selectedIndex","toggle","resetSelectOptions","active","activeNodes","checkGroupActive","checkNodeActive","currentNode","updateHeadlines","headlines","getElementsByClassName","updateListing","removeActiveFilter","addActiveFilter","filterBy","addOptionsToSelect","newOption","initSelectListener","onchange","initSelects","getElements","ids","newElement","initButtonListener","activeButton","inactiveButton","activeView","inactiveView","addEventListener","ACTIVE","initCardListener","card","button","CARD_DROPDOWN_CLASS","body","CARD_BODY_CLASS","BUTTON_IDS","VIEW_IDS","buttons","views","cards"],"mappings":"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","file":"main.js","sourcesContent":["'use strict';\n/* global projectsList */\n/* global Set */\n\n(function () {\n\n    // constants\n    const HIDDEN = 'd-none';\n    const FILTERIDSUBSTRING = 'filter-select-';\n    const LISTPROPERTYIDSUBSTRING = 'list-property-';\n\n    // global variables\n    let filterKeys = [];\n    let listPropertyKeys = [];\n    let filters = {};\n    let nodes = [];\n\n    // Helpers\n\n    function getKeyFromId(id, idSubstring) {\n        return id.split(idSubstring)[1];\n    }\n\n    function getListElementId(nodeId) {\n        return 'list-' + nodeId\n    }\n\n    function getGridElementId(nodeId) {\n        return 'grid-' + nodeId\n    }\n\n    function getSelectByKey(key) {\n        let selectId = FILTERIDSUBSTRING + key;\n        return document.getElementById(selectId);\n    }\n\n    function getAllSelects() {\n        let selects = [];\n\n        filterKeys.forEach(function (key) {\n            selects.push(getSelectByKey(key));\n        });\n\n        return selects;\n    }\n\n    // Function for initializing the key lists\n\n    function addKeysToList(list, elements, idSubstring) {\n        let regex = new RegExp('^' + idSubstring);\n        for (let i = 0; i < elements.length; i++) {\n            if (regex.test(elements[i].id)) {\n                list.push(getKeyFromId(elements[i].id, idSubstring));\n            }\n        }\n    }\n\n    function initKeyLists() {\n        let selects = document.getElementsByTagName('select');\n        let divs = document.getElementsByTagName('div');\n        addKeysToList(filterKeys, selects, FILTERIDSUBSTRING);\n        addKeysToList(listPropertyKeys, divs, LISTPROPERTYIDSUBSTRING);\n        listPropertyKeys = Array.from(new Set(listPropertyKeys));\n    }\n\n\n    // Functions for adding DOM elements to the list view\n\n    function addNodeToGroupList(list, node) {\n        for (let i = 0; i < list.length; ++i) {\n            let currentGroup = list[i];\n            for (let j = 0; j < list[i].length; ++j) {\n                if (node['group'] === currentGroup[j].group) {\n                    currentGroup.push(node);\n                    return;\n                }\n            }\n        }\n        let newGroup = [node];\n        list.push(newGroup);\n    }\n\n    function getNodesByGroup() {\n        let groups = [];\n        projectsList.forEach(function (node) {\n            addNodeToGroupList(groups, node);\n        });\n        return groups;\n    }\n\n    function createListItemProperty(node, key) {\n        let property = document.createElement('div');\n        property.innerHTML = node[key];\n        property.classList = 'list-item--' + key;\n        return property;\n    }\n\n    function createListItem(node) {\n        let newListItem = document.createElement('div');\n        newListItem.id = 'list-' + node.id;\n        newListItem.classList = 'list-item';\n        listPropertyKeys.forEach(function (key) {\n            newListItem.appendChild(createListItemProperty(node, key));\n        });\n        return newListItem;\n    }\n\n    function addGroupToHTML(group) {\n        let list = document.getElementById('list-view');\n        let headline = document.createElement('h2');\n        headline.innerHTML = group[0].group;\n        headline.classList = 'list-view--headline';\n        list.appendChild(headline);\n\n        for (let i = 0; i < group.length; ++i) {\n            list.appendChild(createListItem(group[i]));\n        }\n    }\n\n    function initList() {\n        let groups = getNodesByGroup();\n        groups.forEach(addGroupToHTML);\n    }\n\n\n    // Function for initializing the list of nodes\n\n    function initNodes() {\n        projectsList.forEach(function (project) {\n            let newNode = {\n                listElement: document.getElementById(getListElementId(project.id)),\n                gridElement: document.getElementById(getGridElementId(project.id)),\n                group: project.group,\n                name: project.name\n            };\n            filterKeys.forEach(function (key) {\n                newNode[key] = project[key];\n            });\n            nodes.push(newNode);\n        });\n    }\n\n\n    // Functions for creating the lists used for dropdown initialization and update\n\n    function addKeyToList(list, key, node) {\n        for (let i = 0; i < list.length; ++i) {\n            if (node[key] === list[i]) {\n                return\n            }\n        }\n        list.push(node[key]);\n    }\n\n    function getSelectOptionsLists(nodeList) {\n        let lists = [];\n\n        filterKeys.forEach(function (key) {\n            let list = [];\n            nodeList.forEach(function (node) {\n                addKeyToList(list, key, node);\n            });\n            lists.push(list);\n        });\n\n        return lists;\n    }\n\n\n    // Functions for updating the visibility of dropdown options upon filter selection\n\n    function setOption(option, list) {\n        for (let i = 0; i < list.length; ++i) {\n            if (list[i] === option.value) {\n                if (option.classList.contains(HIDDEN)) {\n                    option.classList.remove(HIDDEN);\n                }\n                return;\n            }\n        }\n        if (!option.classList.contains(HIDDEN)) {\n            option.classList.add(HIDDEN);\n        }\n    }\n\n    function updateDropdowns() {\n        let select;\n        let activeOptionsLists = getSelectOptionsLists(getActiveNodes());\n        filterKeys.forEach(function (key, index) {\n            if (!filters[key]) {\n                select = getSelectByKey(key);\n                for (let i = 2; i < select.options.length; ++i) {\n                    setOption(select.options[i], activeOptionsLists[index]);\n                }\n            }\n        });\n    }\n\n\n    function hideSelectOptions(options, selectedIndex) {\n        for (let i = 0; i < options.length; i++) {\n            if (i !== selectedIndex) {\n                options[i].classList.toggle(HIDDEN);\n            }\n        }\n    }\n\n    function resetSelectOptions(select) {\n        select.options[0].classList.toggle(HIDDEN);\n        select.options[1].classList.toggle(HIDDEN);\n        select.selectedIndex = 0;\n    }\n\n\n    // Functions for updating the visibility of grid and list elements upon filter selection\n\n    function getActiveNodes() {\n        let active;\n        let activeNodes = [];\n        nodes.forEach(function (node) {\n            active = true;\n            filterKeys.forEach(function (key) {\n                if (filters[key] && filters[key] !== node[key]) {\n                    active = false;\n                }\n            });\n\n            if (active) {\n                activeNodes.push(node);\n            }\n        });\n        return activeNodes;\n    }\n\n    function checkGroupActive(activeNodes, group) {\n        for (let i = 0; i < activeNodes.length; i++) {\n            if (activeNodes[i].group === group[0].group) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function checkNodeActive(activeNodes, currentNode) {\n        for (let i = 0; i < activeNodes.length; i++) {\n            if (activeNodes[i] === currentNode) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function updateHeadlines(activeNodes) {\n        let headlines = document.getElementsByClassName('list-view--headline');\n        let groups = getNodesByGroup();\n        for (let i = 0; i < groups.length; ++i) {\n            if (checkGroupActive(activeNodes, groups[i])) {\n                if (headlines[i].classList.contains(HIDDEN)) {\n                    headlines[i].classList.remove(HIDDEN);\n                    headlines[i].classList.remove(HIDDEN);\n                }\n            } else {\n                if (!headlines[i].classList.contains(HIDDEN)) {\n                    headlines[i].classList.add(HIDDEN);\n                    headlines[i].classList.add(HIDDEN);\n                }\n            }\n        }\n    }\n\n    function updateListing() {\n        let activeNodes = getActiveNodes();\n        nodes.forEach(function (node) {\n            if (checkNodeActive(activeNodes, node)) {\n                if (node.listElement.classList.contains(HIDDEN)) {\n                    node.listElement.classList.remove(HIDDEN);\n                    node.gridElement.classList.remove(HIDDEN);\n                }\n            } else {\n                if (!node.listElement.classList.contains(HIDDEN)) {\n                    node.listElement.classList.add(HIDDEN);\n                    node.gridElement.classList.add(HIDDEN);\n                }\n            }\n        });\n        updateHeadlines(activeNodes);\n    }\n\n\n    // Functions for updating the list of active filters upon filter selection\n\n    function removeActiveFilter(select) {\n        let key = getKeyFromId(select.id, FILTERIDSUBSTRING);\n        filters[key] = null;\n        resetSelectOptions(select);\n        updateDropdowns();\n        updateListing();\n    }\n\n    function addActiveFilter(select) {\n        let options = select.options;\n        let index = select.selectedIndex;\n        let key = getKeyFromId(select.id, FILTERIDSUBSTRING);\n        filters[key] = options[index].value;\n        hideSelectOptions(options, index);\n        updateDropdowns();\n        updateListing();\n    }\n\n\n    // Function for handling filter selections\n\n    function filterBy(select) {\n        switch (select.selectedIndex) {\n            case 0:\n                break;\n            case 1:\n                removeActiveFilter(select);\n                break;\n            default:\n                addActiveFilter(select);\n        }\n    }\n\n\n    // Functions for initializing the filter dropdowns\n\n    function addOptionsToSelect(list, select) {\n        for (let i = 0; i < list.length; ++i) {\n            let newOption = document.createElement('option');\n            newOption.value = list[i];\n            newOption.innerHTML = list[i];\n            select.appendChild(newOption);\n        }\n    }\n\n    function initSelectListener(select) {\n        select.onchange = function () {\n            filterBy(select);\n        };\n    }\n\n    function initSelects() {\n        let lists = getSelectOptionsLists(projectsList);\n        let selects = getAllSelects();\n\n        for (let i = 0; i < lists.length; ++i) {\n            addOptionsToSelect(lists[i], selects[i]);\n            initSelectListener(selects[i]);\n        }\n    }\n\n\n    // Initialization\n\n    function initFilter() {\n        if (typeof projectsList !== 'undefined') {\n            initKeyLists();\n            initList();\n            initNodes();\n            initSelects();\n        }\n    }\n\n    initFilter();\n})();\n","'use strict';\n\n(function () {\n\n    // constants\n    const ACTIVE = 'active';\n    const HIDDEN = 'd-none';\n\n    const BUTTON_IDS = ['grid-btn', 'list-btn'];\n    const VIEW_IDS = ['grid-view', 'list-view'];\n\n    const CARD_DROPDOWN_CLASS = 'sliding-card--dropdown-btn';\n    const CARD_BODY_CLASS = 'sliding-card--body';\n\n\n    // Helper Functions\n\n    function getElements (ids) {\n        let elements = [];\n        let newElement;\n        ids.forEach(function(id) {\n            newElement = document.getElementById(id);\n            if (newElement) {\n                elements.push(newElement);\n            }\n        });\n        return elements;\n    }\n\n\n    // Functions for switching between ListView and GridView\n\n    function initButtonListener (activeButton, inactiveButton, activeView, inactiveView) {\n        activeButton.addEventListener('click', function () {\n            if (!activeButton.classList.contains(ACTIVE)) {\n                activeButton.classList.add(ACTIVE);\n                inactiveButton.classList.remove(ACTIVE);\n                activeView.classList.remove(HIDDEN);\n                inactiveView.classList.add(HIDDEN);\n            }\n        });\n    }\n\n    function initViewButtons () {\n        let buttons = getElements(BUTTON_IDS);\n        let views = getElements(VIEW_IDS);\n        if(buttons.length === 2 && views.length === 2) {\n            initButtonListener(buttons[0], buttons[1], views[0], views[1]);\n            initButtonListener(buttons[1], buttons[0], views[1], views[0]);\n        }\n    }\n\n\n    // Functions for opening and closing the SlidingCards\n\n    function initCardListener (card) {\n        let button = card.getElementsByClassName(CARD_DROPDOWN_CLASS)[0];\n        let body = card.getElementsByClassName(CARD_BODY_CLASS)[0];\n        button.addEventListener('click', function () {\n            body.classList.toggle(HIDDEN);\n            button.getElementsByTagName('i')[0].classList.toggle('filter-icon-angle-up');\n            button.getElementsByTagName('i')[0].classList.toggle('filter-icon-angle-down');\n        });\n    }\n\n    function initCardDropdowns () {\n        let cards = document.getElementsByClassName('sliding-card');\n        for (let i = 0; i < cards.length; ++i) {\n            initCardListener(cards[i]);\n        }\n    }\n\n    initViewButtons();\n    initCardDropdowns();\n\n})();\n"]}